{"version":3,"file":"Image.js","sources":["../../../src/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/Image\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\n\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport {equals} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from '../source/Source.js';\n\n\n/**\n * @enum {string}\n */\nconst ImageSourceEventType = {\n\n  /**\n   * Triggered when an image starts loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nclass ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {module:ol/Image} image The image.\n   */\n  constructor(type, image) {\n\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {module:ol/Image}\n     * @api\n     */\n    this.image = image;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/extent~Extent} [extent]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {Array.<number>} [resolutions]\n * @property {module:ol/source/State} [state]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {module:ol/source/Image~Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state\n    });\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.resolutions_ = options.resolutions !== undefined ?\n      options.resolutions : null;\n\n\n    /**\n     * @private\n     * @type {module:ol/reproj/Image}\n     */\n    this.reprojectedImage_ = null;\n\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n  }\n\n  /**\n   * @return {Array.<number>} Resolutions.\n   * @override\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection ||\n        !projection ||\n        equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() &&\n            equivalent(\n              this.reprojectedImage_.getProjection(), projection) &&\n            this.reprojectedImage_.getResolution() == resolution &&\n            equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(\n        sourceProjection, projection, extent, resolution, pixelRatio,\n        function(extent, resolution, pixelRatio) {\n          return this.getImageInternal(extent, resolution,\n            pixelRatio, sourceProjection);\n        }.bind(this));\n      this.reprojectedRevision_ = this.getRevision();\n\n      return this.reprojectedImage_;\n    }\n  }\n\n  /**\n   * @abstract\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {}\n\n  /**\n   * Handle image change events.\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {module:ol/Image} */ (event.target);\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,\n            image));\n        break;\n      case ImageState.LOADED:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,\n            image));\n        break;\n      case ImageState.ERROR:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,\n            image));\n        break;\n      default:\n        // pass\n    }\n  }\n}\n\n\n/**\n * Default image load function for image sources that use module:ol/Image~Image image\n * instances.\n * @param {module:ol/Image} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  image.getImage().src = src;\n}\n\n\nexport default ImageSource;\n"],"names":["const","super"],"mappings":"AAAA;;;AAGA,QAAQ,0BAA0B,OAAO,qBAAqB,CAAC;;AAE/D,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,QAAQ,iBAAiB,OAAO,aAAa,CAAC;AAC9C,OAAO,KAAK,MAAM,oBAAoB,CAAC;AACvC,QAAQ,MAAM,OAAO,cAAc,CAAC;AACpC,QAAQ,UAAU,OAAO,YAAY,CAAC;AACtC,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,MAAM,MAAM,qBAAqB,CAAC;;;;;;AAMzCA,GAAK,CAAC,oBAAoB,GAAG;;;;;;;EAO3B,cAAc,EAAE,gBAAgB;;;;;;;EAOhC,YAAY,EAAE,cAAc;;;;;;;EAO5B,cAAc,EAAE,gBAAgB;;CAEjC,CAAC;;;;;;;;AAQF,IAAM,gBAAgB,GAAc;EAKlC,yBAAW,CAAC,IAAI,EAAE,KAAK,EAAE;;IAEvBC,UAAK,OAAC,IAAI,CAAC,CAAC;;;;;;;IAOZ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;;;;;GAEpB;;;EAhB4B,QAkB9B;;;;;;;;;;;;;;;;;;;;AAoBD,IAAM,WAAW,GAAe;EAI9B,oBAAW,CAAC,OAAO,EAAE;IACnBA,WAAK,OAAC;MACJ,YAAY,EAAE,OAAO,CAAC,YAAY;MAClC,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,UAAU,EAAE,OAAO,CAAC,UAAU;MAC9B,KAAK,EAAE,OAAO,CAAC,KAAK;KACrB,CAAC,CAAC;;;;;;IAMH,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,KAAK,SAAS;MACnD,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;;;;;;;IAO7B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;;;;;;;IAO9B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;;;;;kDAC/B;;;;;;wBAMD,yCAAc,GAAG;IACf,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B;;;;;;;wBAOD,uDAAqB,CAAC,UAAU,EAAE;IAChC,IAAI,IAAI,CAAC,YAAY,EAAE;MACrBD,GAAK,CAAC,GAAG,GAAG,iBAAiB,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;MAChE,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KACrC;IACD,OAAO,UAAU,CAAC;IACnB;;;;;;;;;wBASD,6BAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;IACnDA,GAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,IAAI,CAAC,0BAA0B;QAC3B,CAAC,gBAAgB;QACjB,CAAC,UAAU;QACX,UAAU,CAAC,gBAAgB,EAAE,UAAU,CAAC,EAAE;MAC5C,IAAI,gBAAgB,EAAE;QACpB,UAAU,GAAG,gBAAgB,CAAC;OAC/B;MACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;KAC1E,MAAM;MACL,IAAI,IAAI,CAAC,iBAAiB,EAAE;QAC1B,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,WAAW,EAAE;YAC/C,UAAU;cACR,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,EAAE,UAAU,CAAC;YACrD,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,UAAU;YACpD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,EAAE;UACtD,OAAO,IAAI,CAAC,iBAAiB,CAAC;SAC/B;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;OAC/B;;MAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,WAAW;QACtC,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU;QAC5D,SAAS,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE;UACvC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU;YAC7C,UAAU,EAAE,gBAAgB,CAAC,CAAC;SACjC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MAChB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;MAE/C,OAAO,IAAI,CAAC,iBAAiB,CAAC;KAC/B;IACF;;;;;;;;;;;wBAWD,6CAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,GAAE;;;;;;;wBAO/D,+CAAiB,CAAC,KAAK,EAAE;IACvBA,GAAK,CAAC,KAAK,kCAAkC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5D,QAAQ,KAAK,CAAC,QAAQ,EAAE;MACtB,KAAK,UAAU,CAAC,OAAO;QACrB,IAAI,CAAC,aAAa;UAChB,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,cAAc;YACtD,KAAK,CAAC,CAAC,CAAC;QACZ,MAAM;MACR,KAAK,UAAU,CAAC,MAAM;QACpB,IAAI,CAAC,aAAa;UAChB,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,YAAY;YACpD,KAAK,CAAC,CAAC,CAAC;QACZ,MAAM;MACR,KAAK,UAAU,CAAC,KAAK;QACnB,IAAI,CAAC,aAAa;UAChB,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,cAAc;YACtD,KAAK,CAAC,CAAC,CAAC;QACZ,MAAM;MACR,QAAQ;;KAET;GACF;;;EAtIuB,SAuIzB;;;;;;;;;AASD,OAAO,SAAS,wBAAwB,CAAC,KAAK,EAAE,GAAG,EAAE;EACnD,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC;CAC5B;;;AAGD,eAAe,WAAW,CAAC;"}