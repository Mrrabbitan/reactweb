{"version":3,"file":"tilegrid.js","sources":["../../src/ol/tilegrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {toSize} from './size.js';\nimport {containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth} from './extent.js';\nimport Corner from './extent/Corner.js';\nimport {assign} from './obj.js';\nimport {get as getProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\nimport TileGrid from './tilegrid/TileGrid.js';\n\n\n/**\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {!module:ol/tilegrid/TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n\n/**\n * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  const corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n\n  const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n\n\n/**\n * @typedef {Object} XYZOptions\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the\n * provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|module:ol/size~Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {module:ol/tilegrid~XYZOptions=} opt_options Tile grid options.\n * @return {!module:ol/tilegrid/TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n  const options = /** @type {module:ol/tilegrid/TileGrid~Options} */ ({});\n  assign(options, opt_options !== undefined ?\n    opt_options : /** @type {module:ol/tilegrid~XYZOptions} */ ({}));\n  if (options.extent === undefined) {\n    options.extent = getProjection('EPSG:3857').getExtent();\n  }\n  options.resolutions = resolutionsFromExtent(\n    options.extent, options.maxZoom, options.tileSize);\n  delete options.maxZoom;\n\n  return new TileGrid(options);\n}\n\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @return {!Array.<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {\n  const maxZoom = opt_maxZoom !== undefined ?\n    opt_maxZoom : DEFAULT_MAX_ZOOM;\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  const tileSize = toSize(opt_tileSize !== undefined ?\n    opt_tileSize : DEFAULT_TILE_SIZE);\n  const maxResolution = Math.max(\n    width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n\n/**\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n"],"names":["let","const"],"mappings":"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"}