{"version":3,"file":"condition.js","sources":["../../../src/ol/events/condition.js"],"sourcesContent":["/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {assert} from '../asserts.js';\nimport {TRUE, FALSE} from '../functions.js';\nimport {WEBKIT, MAC} from '../has.js';\n\n\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, module:ol/MapBrowserEvent): boolean} Condition\n */\n\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport const altKeyOnly = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      !originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport const altShiftKeysOnly = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {module:ol/MapBrowserEvent} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport const focus = function(event) {\n  return event.target.getTargetElement() === document.activeElement;\n};\n\n\n/**\n * Return always true.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @function\n * @api\n */\nexport const always = TRUE;\n\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport const click = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport const mouseActionButton = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 &&\n      !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n\n\n/**\n * Return always false.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @function\n * @api\n */\nexport const never = FALSE;\n\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport const pointerMove = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport const singleClick = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport const doubleClick = function(mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport const noModifierKeys = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      !originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKeyOnly = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey &&\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey;\n};\n\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport const shiftKeyOnly = function(mapBrowserEvent) {\n  const originalEvent = mapBrowserEvent.originalEvent;\n  return (\n    !originalEvent.altKey &&\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n      originalEvent.shiftKey);\n};\n\n\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport const targetNotEditable = function(mapBrowserEvent) {\n  const target = mapBrowserEvent.originalEvent.target;\n  const tagName = target.tagName;\n  return (\n    tagName !== 'INPUT' &&\n      tagName !== 'SELECT' &&\n      tagName !== 'TEXTAREA');\n};\n\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport const mouseOnly = function(mapBrowserEvent) {\n  assert(mapBrowserEvent.pointerEvent, 56); // mapBrowserEvent must originate from a pointer event\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return (\n    /** @type {module:ol/MapBrowserEvent} */ (mapBrowserEvent).pointerEvent.pointerType == 'mouse'\n  );\n};\n\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See http://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport const primaryAction = function(mapBrowserEvent) {\n  const pointerEvent = mapBrowserEvent.pointerEvent;\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n"],"names":["const"],"mappings":"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"}