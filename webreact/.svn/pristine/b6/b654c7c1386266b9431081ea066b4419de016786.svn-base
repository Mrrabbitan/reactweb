{"version":3,"file":"GeoJSON.js","sources":["../../../src/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport JSONFeature from '../format/JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {module:ol/proj~ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n  * @api\n */\nclass GeoJSON extends JSONFeature {\n\n  /**\n   * @param {module:ol/format/GeoJSON~Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super();\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ?\n        options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object.type === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ ({\n        type: 'Feature',\n        geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\n      });\n    }\n\n    const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n      feature.setGeometryName(geoJSONFeature.geometry_name);\n    }\n    feature.setGeometry(geometry);\n    if (geoJSONFeature.id !== undefined) {\n      feature.setId(geoJSONFeature.id);\n    }\n    if (geoJSONFeature.properties) {\n      feature.setProperties(geoJSONFeature.properties);\n    }\n    return feature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromObject(object, opt_options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array.<module:ol/Feature>} */\n    let features = null;\n    if (geoJSONObject.type === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection.features;\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometryFromObject(object, opt_options) {\n    return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromObject(object) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    const crs = geoJSONObject.crs;\n    let projection;\n    if (crs) {\n      if (crs.type == 'name') {\n        projection = getProjection(crs.properties.name);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (\n      /** @type {module:ol/proj/Projection} */ (projection)\n    );\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @override\n   * @api\n   */\n  writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    const object = /** @type {GeoJSONFeature} */ ({\n      'type': 'Feature'\n    });\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n    } else {\n      object.geometry = null;\n    }\n    const properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    } else {\n      object.properties = null;\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array.<module:ol/Feature>} features Features.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @override\n   * @api\n   */\n  writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return /** @type {GeoJSONFeatureCollection} */ ({\n      type: 'FeatureCollection',\n      features: objects\n    });\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {module:ol/geom/Geometry} geometry Geometry.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @override\n   * @api\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  }\n}\n\n\n/**\n * @const\n * @type {Object.<string, function(GeoJSONObject): module:ol/geom/Geometry>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n  'GeometryCollection': readGeometryCollectionGeometry\n};\n\n\n/**\n * @const\n * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\nconst GEOMETRY_WRITERS = {\n  'Point': writePointGeometry,\n  'LineString': writeLineStringGeometry,\n  'Polygon': writePolygonGeometry,\n  'MultiPoint': writeMultiPointGeometry,\n  'MultiLineString': writeMultiLineStringGeometry,\n  'MultiPolygon': writeMultiPolygonGeometry,\n  'GeometryCollection': writeGeometryCollectionGeometry,\n  'Circle': writeEmptyGeometryCollectionGeometry\n};\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/Geometry} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  const geometryReader = GEOMETRY_READERS[object.type];\n  return (\n    /** @type {module:ol/geom/Geometry} */ (transformWithOptions(geometryReader(object), false, opt_options))\n  );\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n * @return {module:ol/geom/GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object.geometries.map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {module:ol/geom/Geometry} geometry Geometry.\n     */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {module:ol/geom/Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object.coordinates);\n}\n\n\n/**\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(/** @type {module:ol/geom/Geometry} */ (\n    transformWithOptions(geometry, true, opt_options)), opt_options);\n}\n\n\n/**\n * @param {module:ol/geom/Geometry} geometry Geometry.\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: []\n  });\n}\n\n\n/**\n * @param {module:ol/geom/GeometryCollection} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: geometries\n  });\n}\n\n\n/**\n * @param {module:ol/geom/LineString} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {module:ol/geom/MultiLineString} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {module:ol/geom/MultiPoint} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {module:ol/geom/MultiPolygon} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * @param {module:ol/geom/Point} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {module:ol/geom/Polygon} geometry Geometry.\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\nexport default GeoJSON;\n"],"names":["const","super","let","this"],"mappings":"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"}