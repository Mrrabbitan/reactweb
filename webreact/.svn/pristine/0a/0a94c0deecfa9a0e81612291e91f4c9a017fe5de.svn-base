{"version":3,"file":"Tile.js","sources":["../../../src/ol/source/Tile.js"],"sourcesContent":["/**\n * @module ol/source/Tile\n */\n\nimport {UNDEFINED} from '../functions.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport {equivalent} from '../proj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport Source from '../source/Source.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {wrapX, getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {module:ol/source/Tile~Options=} options SourceTile source options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n      options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {module:ol/tilegrid/TileGrid}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    /**\n     * @protected\n     * @type {module:ol/TileCache}\n     */\n    this.tileCache = new TileCache(options.cacheSize);\n\n    /**\n     * @protected\n     * @type {module:ol/size~Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = '';\n\n    /**\n     * @protected\n     * @type {module:ol/Tile~Options}\n     */\n    this.tileOptions = {transition: options.transition};\n\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {!Object.<string, module:ol/TileRange>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {module:ol/TileRange} tileRange Tile range.\n   * @param {function(module:ol/Tile):(boolean|undefined)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!module:ol/Tile} */ (tileCache.get(tileCoordKey));\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = (callback(tile) !== false);\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutter(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getResolutions() {\n    return this.tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {}\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {module:ol/tilegrid/TileGrid} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/tilegrid/TileGrid} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  }\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/TileCache} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/size~Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/proj/Projection=} opt_projection Projection.\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    const projection = opt_projection !== undefined ?\n      opt_projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.tileCache.clear();\n    this.changed();\n  }\n}\n\n\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {module:ol/proj/Projection} projection Projection.\n */\nTileSource.prototype.useTile = UNDEFINED;\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {module:ol/Tile} tile The tile.\n   */\n  constructor(type, tile) {\n\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {module:ol/Tile}\n     * @api\n     */\n    this.tile = tile;\n\n  }\n\n}\n\nexport default TileSource;\n"],"names":["super","const","let"],"mappings":"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"}