{"version":3,"file":"TileImage.js","sources":["../../../src/ol/source/TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {getUid} from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from '../source/UrlTile.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/source/State} [state] Source state.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array.<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires module:ol/source/Tile~TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {module:ol/source/TileImage~Options=} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      extent: options.extent,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ?\n        options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,\n     *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}\n     */\n    this.tileClass = options.tileClass !== undefined ?\n      options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/tilegrid/TileGrid>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.canExpireCache.call(this);\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getGutter(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutterInternal();\n    }\n  }\n\n  /**\n   * @protected\n   * @return {number} Gutter.\n   */\n  getGutterInternal() {\n    return 0;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return UrlTile.prototype.getOpaque.call(this, projection);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileGridForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n    }\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection).toString();\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return (\n        /** @type {!module:ol/tilegrid/TileGrid} */ (this.tileGridForProjection[projKey])\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n    }\n    const thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection).toString();\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!module:ol/Tile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n    const tileUrl = urlTileCoord ?\n      this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE,\n      this.handleTileChange, this);\n    return tile;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = /** @type {!module:ol/proj/Projection} */ (this.getProjection());\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = /** @type {!module:ol/Tile} */ (cache.get(tileCoordKey));\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord =\n            this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const newTile = new ReprojTile(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutterInternal(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (!ENABLE_RASTER_REPROJECTION ||\n        this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      const proj = getProjection(projection);\n      if (proj) {\n        const projKey = getUid(proj).toString();\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * @param {module:ol/ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;\n"],"names":["super","const","this","let"],"mappings":"AAAA;;;AAGA,QAAQ,0BAA0B,OAAO,qBAAqB,CAAC;AAC/D,QAAQ,MAAM,OAAO,YAAY,CAAC;AAClC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,QAAQ,MAAM,OAAO,cAAc,CAAC;AACpC,OAAO,SAAS,MAAM,wBAAwB,CAAC;AAC/C,QAAQ,UAAU,EAAE,GAAG,IAAI,aAAa,OAAO,YAAY,CAAC;AAC5D,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAC3C,OAAO,OAAO,MAAM,sBAAsB,CAAC;AAC3C,QAAQ,MAAM,EAAE,SAAS,OAAO,iBAAiB,CAAC;AAClD,QAAQ,gBAAgB,IAAI,wBAAwB,OAAO,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiD5E,IAAM,SAAS,GAAgB;EAI7B,kBAAW,CAAC,OAAO,EAAE;;IAEnBA,YAAK,OAAC;MACJ,YAAY,EAAE,OAAO,CAAC,YAAY;MAClC,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,UAAU,EAAE,OAAO,CAAC,UAAU;MAC9B,KAAK,EAAE,OAAO,CAAC,KAAK;MACpB,QAAQ,EAAE,OAAO,CAAC,QAAQ;MAC1B,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;QACxC,OAAO,CAAC,gBAAgB,GAAG,uBAAuB;MACpD,cAAc,EAAE,OAAO,CAAC,cAAc;MACtC,eAAe,EAAE,OAAO,CAAC,eAAe;MACxC,GAAG,EAAE,OAAO,CAAC,GAAG;MAChB,IAAI,EAAE,OAAO,CAAC,IAAI;MAClB,KAAK,EAAE,OAAO,CAAC,KAAK;MACpB,UAAU,EAAE,OAAO,CAAC,UAAU;KAC/B,CAAC,CAAC;;;;;;IAMH,IAAI,CAAC,WAAW;QACZ,OAAO,CAAC,WAAW,KAAK,SAAS,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;;;;;;;IAOnE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,KAAK,SAAS;MAC9C,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;;;;;;IAMhC,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;;;;;;IAMjC,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;;;;;;IAMhC,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,0BAA0B,CAAC;;;;;;IAMtE,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;;;;;8CACvC;;;;;sBAKD,yCAAc,GAAG;;AAAC;IAChB,IAAI,CAAC,0BAA0B,EAAE;MAC/B,OAAO,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpD;IACD,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE;MACnC,OAAO,IAAI,CAAC;KACb,MAAM;MACL,KAAKC,GAAK,CAAC,GAAG,IAAIC,MAAI,CAAC,sBAAsB,EAAE;QAC7C,IAAIA,MAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE;UACrD,OAAO,IAAI,CAAC;SACb;OACF;KACF;IACD,OAAO,KAAK,CAAC;IACd;;;;;sBAKD,mCAAW,CAAC,UAAU,EAAE,SAAS,EAAE;;AAAC;IAClC,IAAI,CAAC,0BAA0B,EAAE;MAC/B,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;MAChE,OAAO;KACR;IACDD,GAAK,CAAC,aAAa,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;;IAEjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,IAAI,aAAa,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC;IAC7E,KAAKA,GAAK,CAAC,EAAE,IAAIC,MAAI,CAAC,sBAAsB,EAAE;MAC5CD,GAAK,CAAC,SAAS,GAAGC,MAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;MAClD,SAAS,CAAC,WAAW,CAAC,SAAS,IAAI,aAAa,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC;KACpE;IACF;;;;;sBAKD,+BAAS,CAAC,UAAU,EAAE;IACpB,IAAI,0BAA0B;QAC1B,IAAI,CAAC,aAAa,EAAE,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,UAAU,CAAC,EAAE;MACvF,OAAO,CAAC,CAAC;KACV,MAAM;MACL,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;KACjC;IACF;;;;;;sBAMD,+CAAiB,GAAG;IAClB,OAAO,CAAC,CAAC;IACV;;;;;sBAKD,+BAAS,CAAC,UAAU,EAAE;IACpB,IAAI,0BAA0B;QAC1B,IAAI,CAAC,aAAa,EAAE,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,UAAU,CAAC,EAAE;MACvF,OAAO,KAAK,CAAC;KACd,MAAM;MACL,OAAO,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC3D;IACF;;;;;sBAKD,+DAAwB,CAAC,UAAU,EAAE;IACnC,IAAI,CAAC,0BAA0B,EAAE;MAC/B,OAAO,OAAO,CAAC,SAAS,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC1E;IACDD,GAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACtC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,EAAE;MACpE,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB,MAAM;MACLA,GAAK,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;MAC9C,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE;QAC5C,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,wBAAwB,CAAC,UAAU,CAAC,CAAC;OAC5E;MACD,OAAO;oDACuC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;OAClF,CAAC;KACH;IACF;;;;;sBAKD,+DAAyB,CAAC,UAAU,EAAE;IACpC,IAAI,CAAC,0BAA0B,EAAE;MAC/B,OAAO,OAAO,CAAC,SAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC3E;IACDA,GAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE;MACxF,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB,MAAM;MACLA,GAAK,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;MAC9C,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE;QAC7C,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;OACpF;MACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;KAC7C;IACF;;;;;;;;;;;;sBAYD,mCAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE;IAChDA,GAAK,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5BA,GAAK,CAAC,YAAY,GAAG,IAAI,CAAC,8BAA8B;MACtD,SAAS,EAAE,UAAU,CAAC,CAAC;IACzBA,GAAK,CAAC,OAAO,GAAG,YAAY;MAC1B,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,UAAU,EAAE,UAAU,CAAC,GAAG,SAAS,CAAC;IACzEA,GAAK,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS;MAC7B,SAAS;MACT,OAAO,KAAK,SAAS,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK;MACxD,OAAO,KAAK,SAAS,GAAG,OAAO,GAAG,EAAE;MACpC,IAAI,CAAC,WAAW;MAChB,IAAI,CAAC,gBAAgB;MACrB,IAAI,CAAC,WAAW,CAAC,CAAC;IACpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACf,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM;MAC3B,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAC/B,OAAO,IAAI,CAAC;IACb;;;;;sBAKD,2BAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE;IACvCA,GAAK,CAAC,gBAAgB,6CAA6C,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IAC1F,IAAI,CAAC,0BAA0B;QAC3B,CAAC,gBAAgB,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,gBAAgB,EAAE,UAAU,CAAC,EAAE;MAChF,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,gBAAgB,IAAI,UAAU,CAAC,CAAC;KAClF,MAAM;MACLA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;MACzDA,GAAK,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5BE,GAAG,CAAC,IAAI,CAAC;MACTF,GAAK,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;MACvC,IAAI,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;QACnC,IAAI,kCAAkC,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;OACjE;MACDA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;MAC1B,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE;QAC3B,OAAO,IAAI,CAAC;OACb,MAAM;QACLA,GAAK,CAAC,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;QACvEA,GAAK,CAAC,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACjEA,GAAK,CAAC,gBAAgB;YAClB,IAAI,CAAC,8BAA8B,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC/DA,GAAK,CAAC,OAAO,GAAG,IAAI,UAAU;UAC5B,gBAAgB,EAAE,cAAc;UAChC,UAAU,EAAE,cAAc;UAC1B,SAAS,EAAE,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC;UAC/D,IAAI,CAAC,iBAAiB,EAAE;UACxB,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE;YAC5B,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;WACpE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,2BAA2B;UAC9C,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACjC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;;QAElB,IAAI,IAAI,EAAE;UACR,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;UAC3B,OAAO,CAAC,mBAAmB,EAAE,CAAC;UAC9B,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SACtC,MAAM;UACL,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAClC;QACD,OAAO,OAAO,CAAC;OAChB;KACF;IACF;;;;;;;;;;;sBAWD,2CAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE;IAC/CE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;IAChBF,GAAK,CAAC,YAAY,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxCA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;MAC7C,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;MAC9D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;KACxC,MAAM;MACL,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;MACxC,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE;;;;QAInBA,GAAK,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;;;QAG9D,IAAI,WAAW,CAAC,QAAQ,EAAE,IAAI,SAAS,CAAC,IAAI,EAAE;;UAE5C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;SAC5C,MAAM;UACL,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAChC;QACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;OAC5C;KACF;IACD,OAAO,IAAI,CAAC;IACb;;;;;;;sBAOD,iEAA0B,CAAC,MAAM,EAAE;;AAAC;IAClC,IAAI,CAAC,0BAA0B;QAC3B,IAAI,CAAC,wBAAwB,IAAI,MAAM,EAAE;MAC3C,OAAO;KACR;IACD,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC;IACvC,KAAKA,GAAK,CAAC,EAAE,IAAIC,MAAI,CAAC,sBAAsB,EAAE;MAC5CA,MAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;KACzC;IACD,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB;;;;;;;;;;;;;;sBAcD,6DAAwB,CAAC,UAAU,EAAE,QAAQ,EAAE;IAC7C,IAAI,0BAA0B,EAAE;MAC9BD,GAAK,CAAC,IAAI,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;MACvC,IAAI,IAAI,EAAE;QACRA,GAAK,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;QACxC,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE;UAC5C,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;SAChD;OACF;KACF;GACF;;;EArUqB,UAsUvB;;;;;;;AAOD,SAAS,uBAAuB,CAAC,SAAS,EAAE,GAAG,EAAE;EAC/C,SAAS,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC;CAChC;;AAED,eAAe,SAAS,CAAC;"}