{"version":3,"file":"JSONFeature.js","sources":["../../../src/ol/format/JSONFeature.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getType() {\n    return FormatType.JSON;\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @return {module:ol/Feature} Feature.\n   * @api\n   */\n  readFeature(source, opt_options) {\n    return this.readFeatureFromObject(\n      getObject(source), this.getReadOptions(source, opt_options));\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @return {Array.<module:ol/Feature>} Features.\n   * @api\n   */\n  readFeatures(source, opt_options) {\n    return this.readFeaturesFromObject(\n      getObject(source), this.getReadOptions(source, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {module:ol/Feature} Feature.\n   */\n  readFeatureFromObject(object, opt_options) {}\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {Array.<module:ol/Feature>} Features.\n   */\n  readFeaturesFromObject(object, opt_options) {}\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @return {module:ol/geom/Geometry} Geometry.\n   * @api\n   */\n  readGeometry(source, opt_options) {\n    return this.readGeometryFromObject(\n      getObject(source), this.getReadOptions(source, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {module:ol/geom/Geometry} Geometry.\n   */\n  readGeometryFromObject(object, opt_options) {}\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\n   * @return {module:ol/proj/Projection} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {module:ol/proj/Projection} Projection.\n   */\n  readProjectionFromObject(object) {}\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, opt_options) {\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, opt_options) {}\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array.<module:ol/Feature>} features Features.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, opt_options) {\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array.<module:ol/Feature>} features Features.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, opt_options) {}\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {module:ol/geom/Geometry} geometry Geometry.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, opt_options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {module:ol/geom/Geometry} geometry Geometry.\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, opt_options) {}\n}\n\n\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\n\nexport default JSONFeature;\n"],"names":["super","const"],"mappings":"AAAA;;;AAGA,OAAO,aAAa,MAAM,sBAAsB,CAAC;AACjD,OAAO,UAAU,MAAM,yBAAyB,CAAC;;;;;;;;;;AAUjD,IAAM,WAAW,GAAsB;EACrC,oBAAW,GAAG;IACZA,kBAAK,KAAC,CAAC,CAAC;;;;;kDACT;;;;;wBAKD,2BAAO,GAAG;IACR,OAAO,UAAU,CAAC,IAAI,CAAC;IACxB;;;;;;;;;;;wBAWD,mCAAW,CAAC,MAAM,EAAE,WAAW,EAAE;IAC/B,OAAO,IAAI,CAAC,qBAAqB;MAC/B,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;;;wBAWD,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE;IAChC,OAAO,IAAI,CAAC,sBAAsB;MAChC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;wBASD,uDAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;wBAS7C,yDAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU9C,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE;IAChC,OAAO,IAAI,CAAC,sBAAsB;MAChC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;wBASD,yDAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;wBAS9C,yCAAc,CAAC,MAAM,EAAE;IACrB,OAAO,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACzD;;;;;;;;wBAQD,6DAAwB,CAAC,MAAM,EAAE,GAAE;;;;;;;;;;wBAUnC,qCAAY,CAAC,OAAO,EAAE,WAAW,EAAE;IACjC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IACtE;;;;;;;;wBAQD,iDAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU3C,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE;IACnC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IACxE;;;;;;;;wBAQD,mDAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU7C,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE;IACnC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IACxE;;;;;;;;wBAQD,mDAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE;;;EA7JrB,gBA8JzB;;;;;;;AAOD,SAAS,SAAS,CAAC,MAAM,EAAE;EACzB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAC9BC,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,MAAM,yBAAyB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;GACvD,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE;IAC1B,OAAO,MAAM,CAAC;GACf,MAAM;IACL,OAAO,IAAI,CAAC;GACb;CACF;;;AAGD,eAAe,WAAW,CAAC;"}